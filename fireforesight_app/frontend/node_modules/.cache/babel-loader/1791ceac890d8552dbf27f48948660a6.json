{"ast":null,"code":"/**\n * @license\n * Copyright 2018-2019 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Table, Type } from \"apache-arrow\";\nexport class ArrowTable {\n  constructor(dataBuffer, indexBuffer, columnsBuffer, styler) {\n    this.dataTable = void 0;\n    this.indexTable = void 0;\n    this.columnsTable = void 0;\n    this.styler = void 0;\n\n    this.getCell = (rowIndex, columnIndex) => {\n      const isBlankCell = rowIndex < this.headerRows && columnIndex < this.headerColumns;\n      const isIndexCell = rowIndex >= this.headerRows && columnIndex < this.headerColumns;\n      const isColumnsCell = rowIndex < this.headerRows && columnIndex >= this.headerColumns;\n\n      if (isBlankCell) {\n        const classNames = [\"blank\"];\n\n        if (columnIndex > 0) {\n          classNames.push(\"level\" + rowIndex);\n        }\n\n        return {\n          type: \"blank\",\n          classNames: classNames.join(\" \"),\n          content: \"\"\n        };\n      } else if (isColumnsCell) {\n        const dataColumnIndex = columnIndex - this.headerColumns;\n        const classNames = [\"col_heading\", \"level\" + rowIndex, \"col\" + dataColumnIndex];\n        return {\n          type: \"columns\",\n          classNames: classNames.join(\" \"),\n          content: this.getContent(this.columnsTable, dataColumnIndex, rowIndex)\n        };\n      } else if (isIndexCell) {\n        const dataRowIndex = rowIndex - this.headerRows;\n        const classNames = [\"row_heading\", \"level\" + columnIndex, \"row\" + dataRowIndex];\n        return {\n          type: \"index\",\n          id: `T_${this.uuid}level${columnIndex}_row${dataRowIndex}`,\n          classNames: classNames.join(\" \"),\n          content: this.getContent(this.indexTable, dataRowIndex, columnIndex)\n        };\n      } else {\n        const dataRowIndex = rowIndex - this.headerRows;\n        const dataColumnIndex = columnIndex - this.headerColumns;\n        const classNames = [\"data\", \"row\" + dataRowIndex, \"col\" + dataColumnIndex];\n        const content = this.styler ? this.getContent(this.styler.displayValuesTable, dataRowIndex, dataColumnIndex) : this.getContent(this.dataTable, dataRowIndex, dataColumnIndex);\n        return {\n          type: \"data\",\n          id: `T_${this.uuid}row${dataRowIndex}_col${dataColumnIndex}`,\n          classNames: classNames.join(\" \"),\n          content\n        };\n      }\n    };\n\n    this.getContent = (table, rowIndex, columnIndex) => {\n      const column = table.getColumnAt(columnIndex);\n\n      if (column === null) {\n        return \"\";\n      }\n\n      const columnTypeId = this.getColumnTypeId(table, columnIndex);\n\n      switch (columnTypeId) {\n        case Type.Timestamp:\n          {\n            return this.nanosToDate(column.get(rowIndex));\n          }\n\n        default:\n          {\n            return column.get(rowIndex);\n          }\n      }\n    };\n\n    this.dataTable = Table.from(dataBuffer);\n    this.indexTable = Table.from(indexBuffer);\n    this.columnsTable = Table.from(columnsBuffer);\n    this.styler = styler ? {\n      caption: styler.get(\"caption\"),\n      displayValuesTable: Table.from(styler.get(\"displayValues\")),\n      styles: styler.get(\"styles\"),\n      uuid: styler.get(\"uuid\")\n    } : undefined;\n  }\n\n  get rows() {\n    return this.indexTable.length + this.columnsTable.numCols;\n  }\n\n  get columns() {\n    return this.indexTable.numCols + this.columnsTable.length;\n  }\n\n  get headerRows() {\n    return this.rows - this.dataRows;\n  }\n\n  get headerColumns() {\n    return this.columns - this.dataColumns;\n  }\n\n  get dataRows() {\n    return this.dataTable.length;\n  }\n\n  get dataColumns() {\n    return this.dataTable.numCols;\n  }\n\n  get uuid() {\n    return this.styler && this.styler.uuid;\n  }\n\n  get caption() {\n    return this.styler && this.styler.caption;\n  }\n\n  get styles() {\n    return this.styler && this.styler.styles;\n  }\n\n  get table() {\n    return this.dataTable;\n  }\n\n  get index() {\n    return this.indexTable;\n  }\n\n  get columnTable() {\n    return this.columnsTable;\n  }\n\n  /**\n   * Returns apache-arrow specific typeId of column.\n   */\n  getColumnTypeId(table, columnIndex) {\n    return table.schema.fields[columnIndex].type.typeId;\n  }\n\n  nanosToDate(nanos) {\n    return new Date(nanos / 1e6);\n  }\n\n}","map":{"version":3,"sources":["D:/Study/insight/project/fire_risk_prediction_SF/app/streamlit-light-leaflet-master/my_component/frontend/src/streamlit/ArrowTable.ts"],"names":["Table","Type","ArrowTable","constructor","dataBuffer","indexBuffer","columnsBuffer","styler","dataTable","indexTable","columnsTable","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","push","type","join","content","dataColumnIndex","getContent","dataRowIndex","id","uuid","displayValuesTable","table","column","getColumnAt","columnTypeId","getColumnTypeId","Timestamp","nanosToDate","get","from","caption","styles","undefined","rows","length","numCols","columns","dataRows","dataColumns","index","columnTable","schema","fields","typeId","nanos","Date"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018-2019 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Table, Type } from \"apache-arrow\"\n\ntype CellType = \"blank\" | \"index\" | \"columns\" | \"data\"\n\nexport interface ArrowDataframeProto {\n  data: ArrowTableProto\n  height: string\n  width: string\n}\n\nexport interface ArrowTableProto {\n  data: Uint8Array\n  index: Uint8Array\n  columns: Uint8Array\n  styler: Styler\n}\n\ninterface Cell {\n  classNames: string\n  content: string\n  id?: string\n  type: CellType\n}\n\ninterface Styler {\n  caption?: string\n  displayValuesTable: Table\n  styles?: string\n  uuid: string\n}\n\nexport class ArrowTable {\n  private readonly dataTable: Table\n  private readonly indexTable: Table\n  private readonly columnsTable: Table\n  private readonly styler?: Styler\n\n  constructor(\n    dataBuffer: Uint8Array,\n    indexBuffer: Uint8Array,\n    columnsBuffer: Uint8Array,\n    styler?: any\n  ) {\n    this.dataTable = Table.from(dataBuffer)\n    this.indexTable = Table.from(indexBuffer)\n    this.columnsTable = Table.from(columnsBuffer)\n    this.styler = styler\n      ? {\n          caption: styler.get(\"caption\"),\n          displayValuesTable: Table.from(styler.get(\"displayValues\")),\n          styles: styler.get(\"styles\"),\n          uuid: styler.get(\"uuid\"),\n        }\n      : undefined\n  }\n\n  get rows(): number {\n    return this.indexTable.length + this.columnsTable.numCols\n  }\n\n  get columns(): number {\n    return this.indexTable.numCols + this.columnsTable.length\n  }\n\n  get headerRows(): number {\n    return this.rows - this.dataRows\n  }\n\n  get headerColumns(): number {\n    return this.columns - this.dataColumns\n  }\n\n  get dataRows(): number {\n    return this.dataTable.length\n  }\n\n  get dataColumns(): number {\n    return this.dataTable.numCols\n  }\n\n  get uuid(): string | undefined {\n    return this.styler && this.styler.uuid\n  }\n\n  get caption(): string | undefined {\n    return this.styler && this.styler.caption\n  }\n\n  get styles(): string | undefined {\n    return this.styler && this.styler.styles\n  }\n\n  get table(): Table {\n    return this.dataTable\n  }\n\n  get index(): Table {\n    return this.indexTable\n  }\n\n  get columnTable(): Table {\n    return this.columnsTable\n  }\n\n  public getCell = (rowIndex: number, columnIndex: number): Cell => {\n    const isBlankCell =\n      rowIndex < this.headerRows && columnIndex < this.headerColumns\n    const isIndexCell =\n      rowIndex >= this.headerRows && columnIndex < this.headerColumns\n    const isColumnsCell =\n      rowIndex < this.headerRows && columnIndex >= this.headerColumns\n\n    if (isBlankCell) {\n      const classNames = [\"blank\"]\n      if (columnIndex > 0) {\n        classNames.push(\"level\" + rowIndex)\n      }\n\n      return {\n        type: \"blank\",\n        classNames: classNames.join(\" \"),\n        content: \"\",\n      }\n    } else if (isColumnsCell) {\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"col_heading\",\n        \"level\" + rowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n\n      return {\n        type: \"columns\",\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.columnsTable, dataColumnIndex, rowIndex),\n      }\n    } else if (isIndexCell) {\n      const dataRowIndex = rowIndex - this.headerRows\n      const classNames = [\n        \"row_heading\",\n        \"level\" + columnIndex,\n        \"row\" + dataRowIndex,\n      ]\n\n      return {\n        type: \"index\",\n        id: `T_${this.uuid}level${columnIndex}_row${dataRowIndex}`,\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.indexTable, dataRowIndex, columnIndex),\n      }\n    } else {\n      const dataRowIndex = rowIndex - this.headerRows\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"data\",\n        \"row\" + dataRowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n      const content = this.styler\n        ? this.getContent(\n            this.styler.displayValuesTable,\n            dataRowIndex,\n            dataColumnIndex\n          )\n        : this.getContent(this.dataTable, dataRowIndex, dataColumnIndex)\n\n      return {\n        type: \"data\",\n        id: `T_${this.uuid}row${dataRowIndex}_col${dataColumnIndex}`,\n        classNames: classNames.join(\" \"),\n        content,\n      }\n    }\n  }\n\n  public getContent = (\n    table: Table,\n    rowIndex: number,\n    columnIndex: number\n  ): any => {\n    const column = table.getColumnAt(columnIndex)\n    if (column === null) {\n      return \"\"\n    }\n\n    const columnTypeId = this.getColumnTypeId(table, columnIndex)\n    switch (columnTypeId) {\n      case Type.Timestamp: {\n        return this.nanosToDate(column.get(rowIndex))\n      }\n      default: {\n        return column.get(rowIndex)\n      }\n    }\n  }\n\n  /**\n   * Returns apache-arrow specific typeId of column.\n   */\n  private getColumnTypeId(table: Table, columnIndex: number): Type {\n    return table.schema.fields[columnIndex].type.typeId\n  }\n\n  private nanosToDate(nanos: number): Date {\n    return new Date(nanos / 1e6)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}